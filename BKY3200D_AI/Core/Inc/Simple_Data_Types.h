
#ifndef  __SIMPLE_DATA_TYPES_H
#define  __SIMPLE_DATA_TYPES_H


#include "TableConst.h"
#include "Device_Types.h"
#include "Device_Status.h"
#include <stdint.h>
#include "Event_Types_Public.h"



/*******************************************************************************
// структура приёма сообщения от кл    
*******************************************************************************/
typedef struct 
{
   uint8_t  InOut                 ;
   uint8_t  Adr                   ;
   uint8_t  Res                   ;
   uint8_t  IdEventKL             ;  
}
StructMesFromKL_t;
/*******************************************************************************

*******************************************************************************/
typedef union  //адрес 
{
  uint32_t   all;
   struct
   {                                                     
      unsigned  OutIn   /**/                : 4;   
      unsigned  Sensor /**/                 : 8; 
      unsigned  KL /**/                     : 4; 
      unsigned  BKY /**/                    : 5; 
      unsigned  AdrType /**/                : 8; 
      unsigned  unused /**/                 : 3; 
   } ;     
}
AdrDevice_t; 
/*******************************************************************************

*******************************************************************************/
typedef union  // 
{
  uint16_t   all;
   struct
   {                                                     
      unsigned  OutIn   /**/                : 8;   
      unsigned  Sensor /**/                 : 8;  
   } ;     
}
EventType_t; 
/******************************************************************************/
 typedef union //словосостояние при работе  с опрашиваемыми через 485 устройствами 
{
   uint16_t   all;
   struct
   {
      unsigned  InitOn   /**/                  : 1;                              //прошло ли устройство инициализацию 1-да 0-нет(либо после включения либо после того как пришла позиция на данное устройство)
      unsigned  InitTry  /**/                  : 1;                              //была ли попытка сделать инициализацию 1-да 0 нет 
      unsigned  Direction /**/                 : 1;                             //направление передачи по кольцу    
      unsigned  Respond   /**/                 : 1;                             // отвечает на запросы 1 - да 0-нет 
      
      unsigned  DisableAdr         /**/        : 1;                              //была ли записана таблица выключенных устройств 1-да 0-нет
      unsigned  ErrorNoConectDuringWork  /**/  : 1;                             //если произо 
      unsigned  InitMessege          /**/      : 1;                              //данный бит позволяет отследить ситуацию когда после неудачной инициализаций устр связь была востоновлена и сообшение было выдано в журнал 
      unsigned  ReplyOkSmtWrong          /**/  : 1;                             // ответ был   но произошла ошибка адресаций рег или что то другое смотрите регистры на которые обращаетесь 
      
      unsigned  MemoryError          /**/      : 1;  
      unsigned  ResProgError         /**/      : 1;    
      unsigned  FirstReading         /**/      : 1;                             //первое чтение событий    
      //сверху старые состояния 
      unsigned  ExludeFromPolling   /**/      : 1;                              //0 не ислючён из опроса 1 - исключён     
   } ;  
}
CondPollingDev_t;
/*******************************************************************************
 зона 
*******************************************************************************/
typedef uint16_t Zone_t;
#define MAX_QTY_OF_ZONE                                     ( Zone_t )400U
/*******************************************************************************
 id пользователя  
*******************************************************************************/
typedef uint8_t UserId_t;
/*******************************************************************************
 id пользователя  
*******************************************************************************/
typedef uint16_t IDEvent_t;
/*******************************************************************************
 тип данных кнопки 
*******************************************************************************/
typedef uint8_t Buttons_t;
/*******************************************************************************
 тип устройств  
*******************************************************************************/
typedef uint8_t TypeDev_t;
/*******************************************************************************
 
*******************************************************************************/
typedef uint16_t CurrentStrLogStruct_t;

/*******************************************************************************
 словосостояние  события   
 1-ое словосостояние используется для внутреннего пользования 
*******************************************************************************/
typedef  union //словосостояние1 для  событий  
{
   uint8_t   all;
   struct
   {      
      unsigned  AtivDeactiv                       : 1;                          //флаг активности события 0 - да 1- нет 
      unsigned  ResetEvent                        : 1;                          //событие было деактивировно сбросом (для пожаров таймеров)
      
      unsigned  NeedTranstoDown    /**/           : 1;                          //событие необходимо отправить вниз (для мастера)
      unsigned  HasBeenTranftoDown /**/           : 1;                          //событие было отправлено вниз   (для мастера)       
      unsigned  EventCame          /**/           : 1;                          //событие пришло снизу  (для мастера)
      unsigned                     /**/           : 1; 
   } ;  
} 
Cond1Event_t ;
/*******************************************************************************
 словосостояние  события   
 2-ое словосостояние используется для отправки вышестоящим устройствам
*******************************************************************************/
typedef union //словосостояние2 для  событий  
{
   uint8_t   all;
   struct
   {
      unsigned  EvetofComand                      : 1;                          //событие  было создано по команде с верху                                 
      unsigned  HasBeenWached      /**/           : 1;                          //было ли событие просмотрено 0-нет 1 да 
                     
      unsigned  TempBitCreation       /**/        : 1;                          //временный бит где было созано событие  1 пришло с верху , 0 создану на БКУ
      unsigned               /**/                 : 1; 
      unsigned               /**/                 : 1; 
      unsigned               /**/                 : 1;             
   } ;  
}
Cond2Event_t ;

/*******************************************************************************

*******************************************************************************/
typedef struct 
{
  const char *String1   ;
  const char *String2   ;
  const char *String3   ;
  const char *TopString ;  
} 
MessageBox_t  ; 
/*******************************************************************************
//   формат времени дата умещается в 32 бита 
*******************************************************************************/
typedef union  
{
   uint32_t   all;
   struct
   {
      unsigned  Second   /**/                 : 6;                            
      unsigned  Minets  /**/                  : 6;                              
      unsigned  Hour /**/                     : 5;       
      unsigned  Day  /**/                     : 5;                              
      unsigned  Month /**/                    : 4;  
      unsigned  Year   /**/                   : 6;       
   } ;     
} TimeDate_t; 
/*******************************************************************************
// индетефикатор события  в системе   
*******************************************************************************/
typedef union
{
   uint32_t   all;
   struct
   {
      unsigned   Adr       /**/           : 5;         
      unsigned   RandomCode/**/           : 11; 
      unsigned   Num        /**/          : 16;                                       
   } ; 
}
IndentificationCode_t;

/*******************************************************************************
// элемент очереди ответа из модас опрос ведомых    
*******************************************************************************/
typedef struct   
{
   uint8_t StatusOfSelect                 ;
   uint8_t NumOfError                     ;
   uint8_t NumOfFunc                      ; 
} 
AnswerModbusPolingMsq_t; 
/*******************************************************************************
 
*******************************************************************************/
typedef union //структура  командного регистра 
{
 uint16_t   all;
 struct
 {
   unsigned  CondLeftKey     /**/          : 1;                                 //состояние левого ключа  
   unsigned  CondRightKey    /**/     : 1;                                      //состояние правого ключа 
   unsigned  CondLeftFE   /**/                        : 1;                      //состояние левогоо ОЭ 
   unsigned  CondRightFE /**/                          : 1;                     //состояние правого ОЭ 
     
   unsigned  AdrFire          /**/                 : 1;                         //наличие извещателей в состояний пожар
   unsigned  AdrActive          /**/                 : 1;                       //наличие извещателей в состояний активирован 
   unsigned  AdrBlock          /**/                 : 1;                        //наличие извещателей в состояний заблокирован 
   unsigned  Adr251          /**/                 : 1;                          //наличие извещателей c 251 адресом    
      
   unsigned       /**/                      : 1;                  
   unsigned            /**/                 : 1;                              
   unsigned     /**/                        : 1;                                         
   unsigned   /**/                          : 1;                     
      
   unsigned            /**/                 : 1; 
   unsigned            /**/                 : 1; 
   unsigned            /**/                 : 1;    
   unsigned            /**/                 : 1;                
 } ;  
}
CondKLAIMbAdr03D3_t;
/*******************************************************************************
 
*******************************************************************************/
typedef union //структура   регистра сошибками кл
{
 uint16_t   all;
 struct
 {
   unsigned  SemErrorType6     /**/          : 1;                               //ошибка при выдаче семафора 
   unsigned  OSErrorType1    /**/     : 1;                                      // ошибка ОС тип 1 
   unsigned  KZLeftIn   /**/                        : 1;                        //кз на левом входе
   unsigned  KZRighttIn /**/                          : 1;                      //кз на правом входе 
     
   unsigned  KZline          /**/                 : 1;                          //кз сл
   unsigned  BreakLine          /**/                 : 1;                       //обрыв ЛС 
   unsigned  OverFlowBufLine          /**/                 : 1;                 //переполнение буфера ЛС 
   unsigned  OpenCap          /**/                 : 1;                         //корпус кл вскрыт    
      
   unsigned  OSErrorType2     /**/                      : 1;                    //переполние стека ОС
   unsigned  OSErrorType3          /**/                 : 1;                    // ошибка ОС тип 2          
   unsigned  OSErrorType4   /**/                        : 1;                    // ошибка ОС тип  3                    
   unsigned  OSErrorType5 /**/                          : 1;                    // ошибка ОС тип 4 
      
   unsigned            /**/                 : 1; 
   unsigned            /**/                 : 1; 
   unsigned            /**/                 : 1;    
   unsigned            /**/                 : 1;                
 } ;  
}
CondKLAIMbAdr03D4_t;
#endif