

#include "Func_for_Log_Struct.h"
#include "Func_for_Log_Struct_Public.h"



//osMutexId osMutexForLogTable;
static  RTC_TimeTypeDef   RTC_Time @ "SDRAM_DATA";
static  RTC_DateTypeDef   RTC_Date @ "SDRAM_DATA";
static  TimeDate_t        TimeDate @ "SDRAM_DATA";



//#include "Func_for_Log_Table.h"


//extern void Put_in_Que_Trans_Event_Down (const uint16_t Event)                    ;
//extern void Add_Event_Bufer_Alarms(const uint8_t TypeEvent ,const uint16_t EventNum,const uint8_t Event)  ;
//extern uint8_t Return_Type_Event (const uint8_t type)                             ;              
//extern void Reload_Log (void)                                                     ;
//extern void Set_Changes_Buf_Alarms(void)                                          ;

void Clear_Log_Table (void)                                                       ;


  /****************************************************************************
  * Function Name: Get_Event_Type_Log_Struct
  * Description:  возвращает тип события из таблицы EventTypeTable
  * 
  *
  * Assumptions: No
  * Parameters: ( const IDEvent_t
  * Returns: TypeEvents_t
  ****************************************************************************/
TypeEvents_t Get_Event_Type_Log_Struct ( const IDEvent_t IDEvent ) 
{ 
 // return EventTypeTable [ IDEvent ] ;   
}
//end

/******************************************************************************/
//анализ неотправленых сообшений 
/******************************************************************************/
/*void Check_Unset_Messege(void)
{  
 if(Get_Cond_Flag_Sys_Table(SYSTEM_TABLE_INFO_WORD_ConditionLog))
 {
   return ;
 } 
 for(uint16_t i=0;i<QTY_EVETS;++i)
 {
   if(!Cheak_Event_Log_Table(i))
   {
      continue ;
   }
   if(EventLog.Events[i].Slovosost2&EVENT_CONDITION_2_NeedTranstoDown && !(EventLog.Events[i].Slovosost2&EVENT_CONDITION_2_HasBeenTranftoDown))  
   {
     Put_in_Que_Trans_Event_Down(i) ;  
   }            
 } 
}
//end
/******************************************************************************/
//ЗАПОЛНЕНИЕ БУФЕРА ТРЕВОГ в момент включения 
/******************************************************************************/
/*void Fill_Bufer_Alarm(void)
{  
 if(Get_Cond_Flag_Sys_Table(SYSTEM_TABLE_INFO_WORD_ConditionLog))
 {
    return ;
 }
 for(uint16_t i=0;i<QTY_EVETS;++i)
 {
   if(!Cheak_Event_Log_Table(i))
   {
     continue ;
   }
   if(!(EventLog.Events[i].Slovosost2 & EVENT_CONDITION_2_HasBeenWached ))      //1-бит в словосостояний 2 это  было ли событие обработано (просмотренно)  
   {
       Add_Event_Bufer_Alarms(Return_Type_Event(EventLog.Events[i].Type_Event),i,EventLog.Events[i].Type_Event);
   }            
 } 
}
//end
/******************************************************************************/
// пробегаю по журналу и отмечаю события норма как отмеченные 
/******************************************************************************/
void Type_Norma_Note_as_Read(void)
{  
// if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK) 
// {
//   for (uint16_t i=0;i<QTY_EVETS;++i)
//   {
//     if(!(EventLog.Events[i].Slovosost2 & EVENT_CONDITION_2_HasBeenWached)) 
//     {
//       if(Return_Type_Event(EventLog.Events[i].Type_Event)==TYPE_EVENT_NORMA) 
 //      {
 //         EventLog.Events[i].Slovosost2|=EVENT_CONDITION_2_HasBeenWached ; // отмечаю как прочитанное            
 //      }          
 //    }        
 //  } 
 //   osMutexRelease(osMutexForLogTable) ;  
// }
}
//end
/******************************************************************************/
//вернуть нужное событие   
/******************************************************************************/
//TypeSrtingEventLog * Return_Event_from_Log_Table(const uint16_t EventNum)
//{
//  if(EventNum>QTY_EVETS)
//  {
//    return NULL ;
//  }
//  return (TypeSrtingEventLog *)&EventLog.Events[EventNum] ; 
//}
//end
/******************************************************************************/
//отмечаю как прочитанное   
/******************************************************************************/
void Note_as_Read_Event_Log_Table(const uint16_t EventNum)
{
 // if(EventNum<QTY_EVETS)
 // {
 //    if( !(EventLog.Events[EventNum].Slovosost2 & EVENT_CONDITION_2_HasBeenWached) )
 //    {
 //      if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
 //      { 
 //         EventLog.Events[EventNum].Slovosost2|=EVENT_CONDITION_2_HasBeenWached ; //отмечаю событие  прочитаным 
 //         osMutexRelease(osMutexForLogTable) ;   
 //         //Reload_Log() ;
 //      }
 //    } 
 // }
}
//end
/******************************************************************************/
//устанавливаю флаг событие не активно
/******************************************************************************/
static void Set_Flag_ActivDeactiv_Log_Table (const uint16_t Num)
{
//  if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
//  { 
//    EventLog.Events[Num].Slovosost1|=EVENT_CONDITION_1_AtivDeactiv ;
//    osMutexRelease(osMutexForLogTable) ;   
    //Reload_Log() ;
 // }
}
//end
/******************************************************************************/
//Вернуть курсор 
/******************************************************************************/
uint16_t Get_Cursor_Event_Log_Table (void)
{
 return EventLog.CurrentStrLogStruct ;
}
//end
/******************************************************************************/
//Вернуть тип события по порядковому номеру
/******************************************************************************/
uint8_t Get_Number_of_Event_Log_Table (const uint16_t EventNum)
{
// return EventLog.Events[EventNum].Type_Event ;
}
//end
/******************************************************************************/
//проверить событие на кореектность информаций 
/******************************************************************************/
/*uint8_t Cheak_Event_Log_Table (const uint16_t EventNum)
{
   if(EventNum>QTY_EVETS)
   {
      return NULL ;
   }
    if(!EventLog.Events[EventNum].Date.Day || EventLog.Events[EventNum].Date.Day >31 )
    {
      return NULL ;
    }
    if(!EventLog.Events[EventNum].Date.Month || EventLog.Events[EventNum].Date.Month >12 )
    {
      return NULL ;
    } 
    if(EventLog.Events[EventNum].Time.hour  >23 )
    {
      return NULL ;
    }
    if(EventLog.Events[EventNum].Time.minets>59 )
    {
      return NULL ;
    }
    if(EventLog.Events[EventNum].Time.second>59 )
    {
      return NULL ;
    }
 return True ;  
}
//end
/******************************************************************************/
// ф-ция возвращает текушее состояние  события  
/******************************************************************************/
/*uint8_t Return_Curent_Condition_Event(const uint16_t CurrentNum)
{
 uint16_t  CurrentNumD ; 
 FullAdressDev_t StructOfPacketforTableDevice ; 
 uint8_t Active=1 ;             // при в ходе в эту функцию неиспраность активна
 
  CurrentNumD=CurrentNum ; 
  //проверяю сообшение по адресу или типу 
  if(EventLog.Events[CurrentNum].Adres)
  {  
    if(EventLog.Events[CurrentNum].Slovosost1 & EVENT_CONDITION_1_AtivDeactiv)//проверяю активно или нет если  неактивно выхожу
    {
       return False ;
    }
    StructOfPacketforTableDevice.all= EventLog.Events[CurrentNum].Adres ;
    CurrentNumD++ ; //увеличиваю счётчик на 1 
       
    while (CurrentNumD != EventLog.CurrentStrLogStruct)
    {
      if (StructOfPacketforTableDevice.all==EventLog.Events[CurrentNumD].Adres )
      { // если адреса равны  беру тип сообшения открытого в данный момент  
         switch ( EventLog.Events[CurrentNum].Type_Event)
         {
            case EVENT_IO_LOW_VOLTAGE: if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_LOW_VOLTAGE)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break ; 
             case  EVENT_KL_CAP_OFF :  if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CAP_OFF)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CAP_ON)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;                         
             case EVENT_BKY_RING_BROKEN :
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_RING_BROKEN)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_RING_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;     
            case EVENT_KL_CONECT_OFF : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CONECT_OFF)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CONECT_ON)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }
                                       break;                                            
             case EVENT_IO_MALFUNCTION:if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_MALFUNCTION)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;                            
             case EVENT_IO_KZ :        if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_KZ)
                                       {
                                         return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;                              
             case EVENT_BKY_OPEN_CORP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_OPEN_CORP)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_CLOSE_CORP)
                                       {
                                         Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                         //Set_Changes_Buf_Alarms () ; 
                                         return False ; 
                                       }         
                                       break;                        
              case EVENT_IO_MISSING :  if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_MISSING)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                           Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                           //Set_Changes_Buf_Alarms () ; 
                                           return False ;  
                                       }        
                                       break;                
          case EVENT_KL_BREAK_ON_LOOP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_BREAK_ON_LOOP)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_BREAK_ON_LOOP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;  
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }        
                                       break;                  
             case EVENT_KL_KZ_ON_SL :  if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_KZ_ON_SL)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_KZ_OK)
                                       {
                                         Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;  
                                         //Set_Changes_Buf_Alarms () ; 
                                         return False ;  
                                       }        
                                       break;                       
             case EVENT_KL_MALFUNC_OP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_MALFUNC_OP)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          //Set_Changes_Buf_Alarms () ; 
                                          return False ;
                                       }        
                                       break;                      
             case EVENT_KL_MALFUNC_RP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_MALFUNC_RP)
                                       {
                                          return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_RP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          // () ; 
                                          return False ; 
                                       }        
                                       break;                                                 
           case EVENT_KL_OVER_CURRENT :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OVER_CURRENT)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OVER_CURRENT_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                        //  Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }        
                                       break;          
           case EVENT_BKY_MALFUNC_OP  :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_MALFUNC_OP)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_OP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                      //    Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }        
                                       break; 
           case EVENT_BKY_MALFUNC_RP  :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_MALFUNC_RP)
                                       {
                                          return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_RP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                      //    Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;                                                                       
           case EVENT_BKY_CONECT_OFF : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_CONECT_OFF)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_CONECT_ON)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                       //   Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;   
            case EVENT_KL_AE_CRITICAL_ERROR : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_CRITICAL_ERROR)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_CRITICAL_ERROR_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                     //     Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;    
             case EVENT_KL_AE_FIRE_IGNORE : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_FIRE_IGNORE)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_FIRE_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                      //    Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;  
             case EVENT_KL_WRONG_ADRRESSING : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_WRONG_ADRRESSING)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OK_ADRRESSING)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                      //    Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;              
         case EVENT_KL_AE_DOUBLE_CURRENT_ERROR : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_DOUBLE_CURRENT_ERROR)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_DOUBLE_CURRENT_ERROR_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                      //    Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;                             
            default:break ;                          
          } 
       }                    
       CurrentNumD++ ; 
       if(CurrentNumD>=QTY_EVETS)  
       {
           CurrentNumD=0 ;
       }             
     }  
   }
  return Active ; 
}
//end
/******************************************************************************/
//очистки лога
/******************************************************************************/
/*void Clear_Log_Table (void)
{
 if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
 {  
  for (uint32_t i=0;i<QTY_EVETS;++i)
  {
    EventLog.Events[i].Adres=0;       
    EventLog.Events[i].Date.all=0;
    EventLog.Events[i].DateThenEventCame.all=0 ;
    EventLog.Events[i].Identifier=0 ;                                 
    EventLog.Events[i].iduser=0;
    EventLog.Events[i].Slovosost1=0;
    EventLog.Events[i].Slovosost2=0;
    EventLog.Events[i].Time.all=0 ;
    EventLog.Events[i].TimeThenEventCame.all=0; 
    EventLog.Events[i].Type_Event=0;
    EventLog.Events[i].Zona=0 ; 
    EventLog.Events[i].Service=0;
    EventLog.Events[i].Service2=0 ;
  }                       
  EventLog.CurrentStrLogStruct=0 ;
  osMutexRelease(osMutexForLogTable) ;  
 }  
 //Reload_Log ();    
}
//end
/******************************************************************************/
//очистка флагов у событий при сбросе 
/******************************************************************************/
/*void Clear_Flags_Event_Log_Table(void)
{       
 if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
 {  
   for(uint16_t i=0;i<QTY_EVETS;++i)
   {             
     if(Get_Master_Slave()==BKY_MASTER)  
     {
       if(EventLog.Events[i].Slovosost2&EVENT_CONDITION_2_NeedTranstoDown && !(EventLog.Events[i].Slovosost2&EVENT_CONDITION_2_HasBeenTranftoDown))  
       {
          EventLog.Events[i].Slovosost2|= EVENT_CONDITION_2_HasBeenTranftoDown; 
       }                   
     }
     EventLog.Events[i].Slovosost1&=~EVENT_CONDITION_1_SynFlag    ;  
     EventLog.Events[i].Slovosost1|= EVENT_CONDITION_1_ResetEvent ;
     //отмечаю все как просмотренные 
     EventLog.Events[i].Slovosost2|=EVENT_CONDITION_2_HasBeenWached ; //отмечаю событие  прочитаным 
  }
  osMutexRelease(osMutexForLogTable) ;  
 }
}
//end



/******************************************************************************/
//добавить новое событие  
/******************************************************************************/
void Add_Event_Log_Struct ( const  EventLogStr_t  * const EventLogStr)
{     
  //беру время 
  k_GetTime(&RTC_Time) ; 
  // беру дату 
  k_GetDate(&RTC_Date);                
   // 
  if(EventLog.CurrentStrLogStruct >= QTY_EVETS_IN_LOG)  //если это первая запись 
  {
    EventLog.CurrentStrLogStruct=0 ;
  }               
          if ( EventLogStr-> Cond2Event ) // поле Cond2Event использую для метки , где текушее событие было создано 
            // событие пришло из вне  либо сверху либо снизу 
          {                                                                     
            TimeDate.all = 0 ; 
            TimeDate.Second =RTC_Time.Seconds ;
            TimeDate.Minets =RTC_Time.Minutes ;
           // if(RTC_Time.TimeFormat) ; // доделать  время 
            TimeDate.Hour   =RTC_Time.Hours   ;                   
           //     EventLog.Events[ EventLog.CurrentStrLogStruct].TimeThenEventCame.all= TimeDate.all;                   //время когда пришло событие 
           //    EventLog.Events[ EventLog.CurrentStrLogStruct].Time= StructOfQueElemntEventLog.SrtingEventLog.Time;//время события                 
           //
           // DateVal.all =0 ;
            TimeDate.Day   =  RTC_Date.Date;
            TimeDate.Month =  RTC_Date.Month ;
            TimeDate.Year  =  RTC_Date.Year ; 
           // 
           //  EventLog.Events[EventLog.CurrentStrLogStruct].DateThenEventCame.all= DateVal.all ;                   //дата  когда пришло событие 
           //  EventLog.Events[EventLog.CurrentStrLogStruct].Date = StructOfQueElemntEventLog.SrtingEventLog.Date ;//дата  события                  
          
            EventLog.Events[EventLog.CurrentStrLogStruct].Cond1Event=0  ;                 //словосостояние пришедшего события 
            //  if(StructOfQueElemntEventLog.SrtingEventLog.Slovosost1&EVENT_CONDITION_1_EvetofComand)
            //   {
            //     EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost1|=EVENT_CONDITION_1_EvetofComand ;
            //   }           
            //  if(StructOfQueElemntEventLog.SrtingEventLog.Slovosost1&EVENT_CONDITION_1_AtivDeactiv)
            //  {
            //    EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost1|=EVENT_CONDITION_1_AtivDeactiv ;
            //  }                     
            EventLog.Events[EventLog.CurrentStrLogStruct].Cond2Event  =  EventLogStr->Cond2Event  ;                        
            EventLog.Events[EventLog.CurrentStrLogStruct].Cond1Event|=EVENT_CONDITION_1_EventCameFromBottom ; 
            // EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost1|=EVENT_CONDITION_1_SynFlag ;  //флаг о том что событие не было синхронизированно 
            //                 
            
            EventLog.Events[EventLog.CurrentStrLogStruct].UserId                =   EventLogStr->UserId                  ;
            EventLog.Events[EventLog.CurrentStrLogStruct].IndentificationCode   =   EventLogStr->IndentificationCode     ;    
            EventLog.Events[EventLog.CurrentStrLogStruct].IDEvent               =   EventLogStr->IDEvent               ;       
          
            EventLog.Events[EventLog.CurrentStrLogStruct].Adres                 =   EventLogStr->Adres                   ;                           
            EventLog.Events[EventLog.CurrentStrLogStruct].Zone                  =   EventLogStr->Zone                    ;    
            EventLog.Events[EventLog.CurrentStrLogStruct].Service               =   EventLogStr->Service                 ;                         
/*
  TimeDate_t            TimeDateThenEventCame           ;//Время прихода сообщения
  TimeDate_t            TimeDate                        ;
  AdrDevice_t           Adres                           ;
  IndentificationCode_t IndentificationCode             ;//индетефикационный код 
  uint32_t              Service                         ;// разное
  Zone_t                Zone                            ;
  IDEvent_t           TypeEvent                      ;//Тип события
  UserId_t              UserId                          ;//Карта
  uint8_t               Cond1Event                      ;
  uint8_t               Cond2Event                      ;
*/
             //Put_Mess_in_Sound_Buf(StructOfQueElemntEventLog.SrtingEventLog.Type_Event);                     
         }
        else
         if ( !EventLogStr-> Cond2Event )  // создано на этом БКУ
         {                                                          
           
            TimeDate.all = 0 ; 
            TimeDate.Second =RTC_Time.Seconds ;
            TimeDate.Minets =RTC_Time.Minutes ;
            TimeDate.Hour   =RTC_Time.Hours   ;                   
                                      
            TimeDate.Day   =  RTC_Date.Date;
            TimeDate.Month =  RTC_Date.Month ;
            if ( RTC_Date.Year < 63 )
            {
              TimeDate.Year = RTC_Date.Year;
            }
            else 
            {
              TimeDate.Year = 63;
            }
            //TimeDate.Year  =  RTC_Date.Year                                     ;             
            EventLog.Events[ EventLog.CurrentStrLogStruct].TimeDate.all= TimeDate.all     ;               
            EventLog.Events[EventLog.CurrentStrLogStruct].TimeDateThenEventCame.all=0     ;               
            //EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost1=StructOfQueElemntEventLog.SrtingEventLog.Slovosost1  ; 
            //EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost1|=EVENT_CONDITION_1_SynFlag ;  //флаг о том что событие не было синхронизированно 
            //EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost2=StructOfQueElemntEventLog.SrtingEventLog.Slovosost2 ; // 
                      
            EventLog.Events[EventLog.CurrentStrLogStruct].UserId                =   EventLogStr->UserId                  ;
            // EventLog.Events[EventLog.CurrentStrLogStruct].IndentificationCode   =   EventLogStr.IndentificationCode     ;    
            EventLog.Events[EventLog.CurrentStrLogStruct].IDEvent                =   EventLogStr->IDEvent               ;       
          
            EventLog.Events[EventLog.CurrentStrLogStruct].Adres                 =   EventLogStr->Adres                   ;                           
            EventLog.Events[EventLog.CurrentStrLogStruct].Zone                  =   EventLogStr->Zone                    ;    
            EventLog.Events[EventLog.CurrentStrLogStruct].Service               =   EventLogStr->Service                 ;  
                      
            EventLog.Events[EventLog.CurrentStrLogStruct].IndentificationCode.Adr = /*адрес БКУ*/2     ; 
            EventLog.Events[EventLog.CurrentStrLogStruct].IndentificationCode.Num  =  EventLog.CurrentStrLogStruct ;
            srand ((unsigned int) HAL_GetTick()+ /*адрес БКУ*/2) ;  
            EventLog.Events[EventLog.CurrentStrLogStruct].IndentificationCode.RandomCode = (uint16_t)(((float)(rand ())/RAND_MAX )* 2047)  ;                    
         }
        
          EventLog.CurrentStrLogStruct++ ;
          if ( EventLog.CurrentStrLogStruct >= QTY_EVETS_IN_LOG )  
          {
            EventLog.CurrentStrLogStruct=0 ;
          }
     /* if(action)   
        {           
          if(Get_Master_Slave()==BKY_MASTER)  
          {
            if((EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost2&EVENT_CONDITION_2_NeedTranstoDown) && !(EventLog.Events[EventLog.CurrentStrLogStruct].Slovosost2&EVENT_CONDITION_2_HasBeenTranftoDown)) 
            {
              Put_in_Que_Trans_Event_Down (EventLog.CurrentStrLogStruct) ; 
            }       
          }  
          Add_Event_Bufer_Alarms(Return_Type_Event(EventLog.Events[EventLog.CurrentStrLogStruct].Type_Event),EventLog.CurrentStrLogStruct,EventLog.Events[EventLog.CurrentStrLogStruct].Type_Event);
          EventLog.CurrentStrLogStruct++ ;       
          if(EventLog.CurrentStrLogStruct>=QTY_EVETS)  
          {
            EventLog.CurrentStrLogStruct=0 ;
          }
        }*/
}
//end

  /****************************************************************************
  * Function Name: Waiting_Log_Struct_OS()
  * Description:  ожидаю мьютекс 
  * 
  *
  * Assumptions: No
  * Parameters:  const QtyStrLogStruct_t
  * Returns: osStatus_t
  ****************************************************************************/
EventLogStr_t *  Get_Event_Log_Struct ( const CurrentStrLogStruct_t  CurrentStrLogStruct )
{
  if ( CurrentStrLogStruct < QTY_EVETS_IN_LOG )
  {
   return ( EventLogStr_t * )&EventLog.Events [ CurrentStrLogStruct ] ; 
  }  
  return ( EventLogStr_t * )NULL ; 
}
//end 

 // EventLogStr_t Events [QTY_EVETS_IN_LOG]        ;
 //  QtyStrLogStruct_t CurrentStrLogStruct                   ;

/******************************************************************************

void Fill_Bufer_Alarm(void)
{  
 if(Get_Cond_Flag_Sys_Table(SYSTEM_TABLE_INFO_WORD_ConditionLog))
 {
    return ;
 }
 for(uint16_t i=0;i<QTY_EVETS;++i)
 {
   if(!Cheak_Event_Log_Table(i))
   {
     continue ;
   }
   if(!(EventLog.Events[i].Slovosost2 & EVENT_CONDITION_2_HasBeenWached ))      //1-бит в словосостояний 2 это  было ли событие обработано (просмотренно)  
   {
       Add_Event_Bufer_Alarms(Return_Type_Event(EventLog.Events[i].Type_Event),i,EventLog.Events[i].Type_Event);
   }            
 } 
}
//end

void Type_Norma_Note_as_Read(void)
{  
 if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK) 
 {
   for (uint16_t i=0;i<QTY_EVETS;++i)
   {
     if(!(EventLog.Events[i].Slovosost2 & EVENT_CONDITION_2_HasBeenWached)) 
     {
       if(Return_Type_Event(EventLog.Events[i].Type_Event)==TYPE_EVENT_NORMA) 
       {
          EventLog.Events[i].Slovosost2|=EVENT_CONDITION_2_HasBeenWached ; // отмечаю как прочитанное            
       }          
     }        
   } 
    osMutexRelease(osMutexForLogTable) ;  
 }
}
//end

TypeSrtingEventLog * Return_Event_from_Log_Table(const uint16_t EventNum)
{
  if(EventNum>QTY_EVETS)
  {
    return NULL ;
  }
  return (TypeSrtingEventLog *)&EventLog.Events[EventNum] ; 
}
//end

void Note_as_Read_Event_Log_Table(const uint16_t EventNum)
{
  if(EventNum<QTY_EVETS)
  {
     if( !(EventLog.Events[EventNum].Slovosost2 & EVENT_CONDITION_2_HasBeenWached) )
     {
       if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
       { 
          EventLog.Events[EventNum].Slovosost2|=EVENT_CONDITION_2_HasBeenWached ; //отмечаю событие  прочитаным 
          osMutexRelease(osMutexForLogTable) ;   
          Reload_Log() ;
       }
     } 
  }
}
//end

static void Set_Flag_ActivDeactiv_Log_Table (const uint16_t Num)
{
  if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
  { 
    EventLog.Events[Num].Slovosost1|=EVENT_CONDITION_1_AtivDeactiv ;
    osMutexRelease(osMutexForLogTable) ;   
    Reload_Log() ;
  }
}
//end

uint16_t Get_Cursor_Event_Log_Table (void)
{
 return EventLog.CurrentStrLogStruct ;
}
//end

uint8_t Get_Number_of_Event_Log_Table (const uint16_t EventNum)
{
 return EventLog.Events[EventNum].Type_Event ;
}
//end

uint8_t Cheak_Event_Log_Table (const uint16_t EventNum)
{
   if(EventNum>QTY_EVETS)
   {
      return NULL ;
   }
    if(!EventLog.Events[EventNum].Date.Day || EventLog.Events[EventNum].Date.Day >31 )
    {
      return NULL ;
    }
    if(!EventLog.Events[EventNum].Date.Month || EventLog.Events[EventNum].Date.Month >12 )
    {
      return NULL ;
    } 
    if(EventLog.Events[EventNum].Time.hour  >23 )
    {
      return NULL ;
    }
    if(EventLog.Events[EventNum].Time.minets>59 )
    {
      return NULL ;
    }
    if(EventLog.Events[EventNum].Time.second>59 )
    {
      return NULL ;
    }
 return True ;  
}
//end

uint8_t Return_Curent_Condition_Event(const uint16_t CurrentNum)
{
 uint16_t  CurrentNumD ; 
 FullAdressDev_t StructOfPacketforTableDevice ; 
 uint8_t Active=1 ;             // при в ходе в эту функцию неиспраность активна
 
  CurrentNumD=CurrentNum ; 
  //проверяю сообшение по адресу или типу 
  if(EventLog.Events[CurrentNum].Adres)
  {  
    if(EventLog.Events[CurrentNum].Slovosost1 & EVENT_CONDITION_1_AtivDeactiv)//проверяю активно или нет если  неактивно выхожу
    {
       return False ;
    }
    StructOfPacketforTableDevice.all= EventLog.Events[CurrentNum].Adres ;
    CurrentNumD++ ; //увеличиваю счётчик на 1 
       
    while (CurrentNumD != EventLog.CurrentStrLogStruct)
    {
      if (StructOfPacketforTableDevice.all==EventLog.Events[CurrentNumD].Adres )
      { // если адреса равны  беру тип сообшения открытого в данный момент  
         switch ( EventLog.Events[CurrentNum].Type_Event)
         {
            case EVENT_IO_LOW_VOLTAGE: if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_LOW_VOLTAGE)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break ; 
             case  EVENT_KL_CAP_OFF :  if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CAP_OFF)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CAP_ON)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;                         
             case EVENT_BKY_RING_BROKEN :
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_RING_BROKEN)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_RING_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;     
            case EVENT_KL_CONECT_OFF : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CONECT_OFF)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_CONECT_ON)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }
                                       break;                                            
             case EVENT_IO_MALFUNCTION:if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_MALFUNCTION)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;                            
             case EVENT_IO_KZ :        if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_KZ)
                                       {
                                         return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }
                                       break;                              
             case EVENT_BKY_OPEN_CORP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_OPEN_CORP)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_CLOSE_CORP)
                                       {
                                         Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                         Set_Changes_Buf_Alarms () ; 
                                         return False ; 
                                       }         
                                       break;                        
              case EVENT_IO_MISSING :  if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_MISSING)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_IO_NORMA)
                                       {
                                           Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                           Set_Changes_Buf_Alarms () ; 
                                           return False ;  
                                       }        
                                       break;                
          case EVENT_KL_BREAK_ON_LOOP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_BREAK_ON_LOOP)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_BREAK_ON_LOOP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;  
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;  
                                       }        
                                       break;                  
             case EVENT_KL_KZ_ON_SL :  if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_KZ_ON_SL)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_KZ_OK)
                                       {
                                         Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;  
                                         Set_Changes_Buf_Alarms () ; 
                                         return False ;  
                                       }        
                                       break;                       
             case EVENT_KL_MALFUNC_OP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_MALFUNC_OP)
                                       {
                                          return True ; 
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ;
                                       }        
                                       break;                      
             case EVENT_KL_MALFUNC_RP :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_MALFUNC_RP)
                                       {
                                          return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_RP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }        
                                       break;                                                 
           case EVENT_KL_OVER_CURRENT :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OVER_CURRENT)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OVER_CURRENT_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }        
                                       break;          
           case EVENT_BKY_MALFUNC_OP  :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_MALFUNC_OP)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_OP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ;
                                          Set_Changes_Buf_Alarms () ; 
                                          return False ; 
                                       }        
                                       break; 
           case EVENT_BKY_MALFUNC_RP  :if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_MALFUNC_RP)
                                       {
                                          return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_RP_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;                                                                       
           case EVENT_BKY_CONECT_OFF : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_CONECT_OFF)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_BKY_CONECT_ON)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;   
            case EVENT_KL_AE_CRITICAL_ERROR : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_CRITICAL_ERROR)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_CRITICAL_ERROR_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;    
             case EVENT_KL_AE_FIRE_IGNORE : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_FIRE_IGNORE)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_FIRE_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;  
             case EVENT_KL_WRONG_ADRRESSING : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_WRONG_ADRRESSING)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_OK_ADRRESSING)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;              
         case EVENT_KL_AE_DOUBLE_CURRENT_ERROR : if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_DOUBLE_CURRENT_ERROR)
                                       {
                                         return True ;  
                                       }
                                       else
                                       if(EventLog.Events[CurrentNumD].Type_Event==EVENT_KL_AE_DOUBLE_CURRENT_ERROR_OK)
                                       {
                                          Set_Flag_ActivDeactiv_Log_Table(CurrentNum) ; 
                                          Set_Changes_Buf_Alarms () ;
                                          return False ; 
                                       }        
                                       break;                             
            default:break ;                          
          } 
       }                    
       CurrentNumD++ ; 
       if(CurrentNumD>=QTY_EVETS)  
       {
           CurrentNumD=0 ;
       }             
     }  
   }
  return Active ; 
}
//end

void Clear_Log_Table (void)
{
 if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
 {  
  for (uint32_t i=0;i<QTY_EVETS;++i)
  {
    EventLog.Events[i].Adres=0;       
    EventLog.Events[i].Date.all=0;
    EventLog.Events[i].DateThenEventCame.all=0 ;
    EventLog.Events[i].Identifier=0 ;                                 
    EventLog.Events[i].iduser=0;
    EventLog.Events[i].Slovosost1=0;
    EventLog.Events[i].Slovosost2=0;
    EventLog.Events[i].Time.all=0 ;
    EventLog.Events[i].TimeThenEventCame.all=0; 
    EventLog.Events[i].Type_Event=0;
    EventLog.Events[i].Zona=0 ; 
    EventLog.Events[i].Service=0;
    EventLog.Events[i].Service2=0 ;
  }                       
  EventLog.CurrentStrLogStruct=0 ;
  osMutexRelease(osMutexForLogTable) ;  
 }  
 Reload_Log ();    
}
//end

void Clear_Flags_Event_Log_Table(void)
{       
 if(osMutexWait(osMutexForLogTable,portMAX_DELAY)==osOK)
 {  
   for(uint16_t i=0;i<QTY_EVETS;++i)
   {             
     if(Get_Master_Slave()==BKY_MASTER)  
     {
       if(EventLog.Events[i].Slovosost2&EVENT_CONDITION_2_NeedTranstoDown && !(EventLog.Events[i].Slovosost2&EVENT_CONDITION_2_HasBeenTranftoDown))  
       {
          EventLog.Events[i].Slovosost2|= EVENT_CONDITION_2_HasBeenTranftoDown; 
       }                   
     }
     EventLog.Events[i].Slovosost1&=~EVENT_CONDITION_1_SynFlag    ;  
     EventLog.Events[i].Slovosost1|= EVENT_CONDITION_1_ResetEvent ;
     //отмечаю все как просмотренные 
     EventLog.Events[i].Slovosost2|=EVENT_CONDITION_2_HasBeenWached ; //отмечаю событие  прочитаным 
  }
  osMutexRelease(osMutexForLogTable) ;  
 }
}
//end */
